#!/usr/bin/env node
'use strict';
const fs = require('fs');             function p(a,b,c){throw Error(a+' parser stopped here: "'+b.substring(c,c+100)+'"');};const q=new Set("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),t=/<!doctype[^>]*>|\x3c!--[\s\S]*?--\x3e|<script[^>]*>[\s\S]*?<\/script>|<style[^>]*>[\s\S]*?<\/style>|<link[^>]*>|<meta[^>]*>/gmi,u={s:/\s*<([\w-]+)\s*/myi,b:/\s*([\w-:]+)(?:="([^"]*)"|='([^']*)'|=([\w-]+))?\s*/myi,w:/\s*(\/?>)\s*/myi,A:/\s*[^<]*/my,l:/\s*<\/[\w-]+>\s*/myi};
function v(a){function b(l){d=l.lastIndex;for(let k in u)u[k].lastIndex=d}function c(){f=u.l.exec(a);if(null!=f)b(u.l),e.push(3);else if(f=u.s.exec(a),null!=f){b(u.s);let l=f[1];e.push(1,l);let k;for(;g=u.b.exec(a);)b(u.b),k=k||new Map,k.set(g[1],(g[2]||g[3]||g[4]||"").trim());k&&e.push(2,k);g=u.w.exec(a);(q.has(l)||"/>"==g[1])&&e.push(3);b(u.w)}else f=u.A.exec(a),null!=f&&b(u.A)}let d=0,f,g,e=[],h=d;for(;d<a.length;)c(),h===d&&p("html",a,d),h=d;b({lastIndex:0});return e}const w=new Set;
function x(a,b,c){return{tagName:b,attributes:c,classList:null!=c&&c.has("class")?new Set(c.get("class").split(/\s+/g)):w,parentNode:a,childNodes:[]}}const y=[];function z(a,b){if(null!=a){let c=a.C=a.C||{};if(!(b in c)){let d=0;c[b]=a.childNodes.filter(f=>{if(f.tagName==b)return f.g=d++,!0})}return c[b]}return y}
function A(a,b){let c=x(null,"root",w),d;for(let f=0;f<a.length;f++)switch(a[f]){case 1:let g=a[++f],e=w;2===a[f+1]&&(f+=2,e=a[f]);d=c.childNodes.length;c.childNodes.push(c=x(c,g,e));b(c,d);break;case 3:c=c.parentNode}}function D(a,b,c){a.a=b;b=a.attributes;c.tag.add(a.tagName);a.classList.forEach(d=>c.B.add(d));b.has("id")&&c.h.add("[id="+b.get("id")+"]");b.has("type")&&c.h.add("[type="+b.get("type")+"]");c.i.push(a)}
const E=a=>{a=a.replace(t,"");a=v(a);const b={i:[],tag:new Set(["*"]),B:new Set,h:new Set};A(a,(c,d)=>D(c,d,b));return b};const F=/\s*\/\*[\s\S]*?\*\/\s*/gm,G=/\s*[>~+.#]\s*|\[[^\]]+\]|\s+/gm;function H(a){a=a.split(/\s*,\s*/gm);a.push(a.map(b=>J(b).trim().replace(G,(c,d)=>{c=c.trim();return 0==d?c:"."==c||"#"==c?"`"+c:1>=c.length?"`":"`"+c.replace(/['"]/gm,"")}).split(/`+/gm)));return a}const K=/:[a-z-]+\([^()]*\)/;function J(a){let b=a.length;for(;;){a=a.replace(K,"");if(a.length==b)break;b=a.length}return a.replace(/:?:[a-z-]+/gm,"")}
function L(a,b,c,d){let f="",g=1;for(;;){a[b]==c?g++:a[b]==d&&g--;if(0==g)break;f+=a[b++]}return f}
function M(a){function b(k){g=k.lastIndex;for(let m in d)d[m].lastIndex=g}function c(){if(0<f&&(e=d.j.exec(a),null!=e)){f--;h.push(2);b(d.j);return}e=d.u.exec(a);if(null!=e){let k=e[1];b(d.u);if("@"==k[0])switch(k.match(/@[a-z-]+/)[0]){case "@media":case "@supports":case "@document":f++;h.push(1,k);break;case "@import":case "@charset":case "@namespace":h.push(5,k+";");break;default:f++;let m=L(a,g,"{","}");b({lastIndex:g+m.length});h.push(1,k,5,m)}else h.push(3,H(e[1])),e=d.v.exec(a),h.push(4,e[1]),
b(d.v)}else g=a.length}const d={u:/\s*([^{;]+?)\s*[{;]\s*/my,v:/\s*([^}]*?)\s*\}/my,j:/\s*\}/my,D:/\s*([^{]*?)\{([^}]+?)\}/my};let f=0,g=0,e,h=[],l=g;for(;g<a.length;)c(),l===g&&p("css",a,g),l=g;return h}function N(a,b){a=a.replace(F,b?c=>/^\s*\/\* @alternate \*\/\s*$/.test(c)?c:"":"");return M(a)}
function O(a,b){let c="",d=0;for(let f=0;f<a.length;f++)switch(a[f]){case 3:let g=a[++f];d=g.length;0<d&&(g.forEach(e=>b.add(e)),c+=g.join());break;case 4:0<d&&(c+="{"+a[++f]+"}");break;case 1:c+=a[++f]+"{";break;case 2:c+="}";break;case 5:c+=a[++f]}return c.replace(/@[a-z-]+[^{]+\{\s*\}/gm,"")};function P(a,b,c){if(0>b&&0>=a)return!1;if(-1===a)return c<=b;if(0===a)return c===b;if(1===a)return 0>b||c>=b;let d=b%a;0>d&&(d+=a);return 1<a?c>=b&&c%a===d:c<=b&&c%(-1*a)===d};function Q(a){function b(l){f=l.lastIndex;for(let k in d)d[k].lastIndex=f}function c(){let l=!1;if(e=d.m.exec(a)){l=!0;var k=e[0].trim();""==k&&(k=" ");g.push(k);b(d.m);h=g.length-1}else if(e=d.o.exec(a))if(l=!0,k=e[0].trim(),b(d.o),":"==k){e=d.c.exec(a);if("("==e[2]){let m=L(a,d.c.lastIndex,"(",")");d.c.lastIndex+=m.length+1;e[2]="not"==e[1]?Q(m):m}g.splice(h+1,0,e[2],e[1],k);b(d.c)}else"["==k?(e=d.b.exec(a),g.splice(h+1,0,e[3],e[2],e[1],k),b(d.b)):(e=d.f.exec(a),g.push(e[1],k),b(d.f));else if(e=
d.f.exec(a))l=!0,g.push(e[1],"_"),b(d.f);return l}const d={f:/([\w*-]+)/iy,b:/([\w-]+)(?:(.?=)["']?([^\]]*?)["']?)?\]/iy,c:/([\w-]+)(\()?/iy,o:/\s*[:.#\[]\s*/iy,m:/\s*[>~+]\s*|\s+/iy};let f=0,g=[],e,h=-1;for(;f<a.length;)c();return g}const R=/^([+-]?\d*)?n([+-]\d+)?$/;function S(a,b,c,d){d=d||"=";a=a.attributes;if(a.has(b))switch(b=a.get(b),d){case "=":return null==c||c==b;case "*=":return-1!=b.indexOf(c);case "^=":return b.startsWith(c);case "$=":return b.endsWith(c);case "~=":return c==b||b.startsWith(c+" ")||b.endsWith(" "+c)||-1!=b.indexOf(" "+c+" ")}return!1}
function T(a,b){if("odd"==b)a=1==a%2;else if("even"==b)a=0==a%2;else if(/^\d+$/.test(b))a=a==+b;else{var c=R.exec(b);null!=c?(b=c[1],c=c[2],b=null==b||"+"==b?1:"-"==b?-1:+b,c=null==c?0:+c,b=[b,c]):b=[0,0];a=P(b[0],b[1],a)}return a}
function U(a,b){let c,d;for(;-1<b.a;){switch(a[b.a]){case "_":var f=a[--b.a];d=f==b.node.tagName||"*"==f;b.a--;break;case "#":var g=a[--b.a];d=S(b.node,"id",g,"=");b.a--;break;case ".":f=a[--b.a];d=b.node.classList.has(f);b.a--;break;case "[":f=a[--b.a];var e=a[--b.a];g=a[--b.a];d=S(b.node,f,g,e);b.a--;break;case ":":f=a[--b.a];g=a[--b.a];let h=b.node,l=h.tagName;c=h.a;let k=(e=h.parentNode)?e.childNodes.length:1;switch(f){case "not":d=!U(g,{node:b.node,a:g.length-1});break;case "first-child":d=0==
c;break;case "last-child":d=c==k-1;break;case "only-child":d=1==k;break;case "nth-child":d=T(c+1,g);break;case "nth-last-child":d=T(k-c,g);break;case "first-of-type":z(e,l);d=0==h.g;break;case "last-of-type":f=z(e,l);d=h.g==f.length-1;break;case "only-of-type":f=z(e,l);d=1==f.length;break;case "nth-of-type":z(e,l);d=T(h.g+1,g);break;case "nth-last-of-type":f=z(e,l),d=T(f.length-h.g,g)}b.a--;break;case " ":c=--b.a;for(d=!1;!d;){e=b.node.parentNode;if(null==e)break;b.a=c;b.node=e;d=U(a,b)}break;case ">":b.a--;
e=b.node.parentNode;null!=e?(b.node=e,d=U(a,b)):d=!1;break;case "+":b.a--;e=b.node.parentNode;null!=e&&0<b.node.a?(b.node=e.childNodes[b.node.a-1],d=U(a,b)):d=!1;break;case "~":if(b.a--,d=!1,c=b.node.a,e=b.node.parentNode,null!=e&&0<c)for(g=0;g<c&&!d;g++)b.node=e.childNodes[g],d=U(a,b)}if(!d)break}return d}function aa(a,b){return a.some(c=>U(b,{a:b.length-1,node:c}))};function V(a,b,c,d,f){f=f||"";for(let h=b.length-1;-1<h;h--){var g=b[h];if(!c.has(g[2])&&!0===d(f+g[2])){var e=g[0];g=g[1];a=a.slice(0,e)+""+a.slice(e+g)}}return a}const W=/([{};])\s*(--[\w-]+)\s*:\s*([^;}]+);?\s*/gm,X=/var\(([\w-]+)\)/gm,Y=/\s*,\s*/gm;function ba(a){let b={},c;for(;X.test(a);){for(;c=W.exec(a);)b[c[2]]=c[3];a=a.replace(X,(d,f)=>X.test(b[f])?d:b[f])}return a}
function ca(a,b,c){let d=[];var f=/@(?:-\w+-)?keyframes\s+([\w-]+)\s*\{/gm;let g;for(;g=f.exec(a);)d.push([g.index,g[0].length+L(a,f.lastIndex,"{","}").length+1,g[1]]);let e=new Set;for(f=/animation(?:-name)?:([^;!}]+)/gm;g=f.exec(b);)g[1].trim().split(Y).forEach(h=>{let l=h.match(/^\S+/)[0];/^-?[\d.]+m?s/.test(l)&&(l=h.match(/\S+$/)[0]);e.add(l)});return V(a,d,e,c,"@keyframes ")}function Z(a){return a.trim().replace(/'|"/gm,"").split(Y)}
function da(a,b,c){var d=/@font-face[^}]+\}+/gm;let f,g=[];for(;f=d.exec(a);)g.push([f.index,f[0].length]);for(var e=/font-family:([^;!}]+)/,h,l=0;f=d.exec(b);)h=e.exec(f[0]),g[l++].push(Z(h[1])[0]);let k=new Set;for(h=/@font-face[^}]+\}+|font-family:([^;!}]+)/gm;f=h.exec(b);)"@"!==f[0][0]&&Z(f[1]).forEach(m=>k.add(m));d=/font:([^;!}]+)/gm;for(e=/\s*(?:['"][\w- ]+['"]|[\w-]+)\s*(?:,|$)/gm;f=d.exec(b);){for(l="";h=e.exec(f[1]);)l+=h[0];Z(l).forEach(m=>k.add(m))}return V(a,g,k,c,"@font-face ")}
function ea(a){let b=a;do a=b,b=a.replace(W,(c,d,f)=>-1!=a.indexOf("var("+f+")")?c:d);while(b!=a);return b}function fa(a,b){let c=ba(a).replace(W,(d,f)=>f);a=ca(a,c,b);a=da(a,c,b);a=ea(a);return a.replace(/[^{}]+\{\s*\}/gm,"")};/*
 dropcss by Leon Sorokin
 https://github.com/leeoniya/dropcss
 Copyright(c) 2020
 MIT Licensed
*/
const ha=/\[([\w-]+)(?:(.?=)"?([^\]]*?)"?)?\]/i,ia=/:(?:first|last|nth|only|not)\b/;function ja(a){return a.replace(/:?:[a-z-]+/gm,b=>b.startsWith("::")||!ia.test(b)?"":b).replace(/:[a-z-]+\(\)/gm,"")}const ka=()=>!0;/*
 trapcss: Removes unused selectors from CSS files to achieve
 maximum optimisation. Can be used as an API function or with CLI.

 Copyright (C) 2020  Art Deco Code Limited

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as
 published by the Free Software Foundation, either version 3 of the
 License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
module.exports={_trapcss:function(a){const {html:b,shouldDrop:c=ka,css:d,keepAlternate:f=!1}=a,g=E(b);a=N(d,f);let e={};for(var h=0;h<a.length;h++){if(3!==a[h])continue;let k=a[h+1],m=k[k.length-1];h++;for(let r=0;r<m.length;r++){let I=m[r];a:for(let B=0;B<I.length;B++){let n=I[B];var l=!1;if(""!=n){if(n in e)l=e[n];else switch(n[0]){case "#":l=n.substr(1);e[n]=l=g.h.has("[id="+l+"]");break;case ".":l=n.substr(1);e[n]=l=g.B.has(l);break;case "[":if(n.startsWith("[type="))e[n]=l=g.h.has(n);else{let C=
n.match(ha);e[n]=l=g.i.some(la=>S(la,C[1],C[3],C[2]))}break;default:e[n]=l=g.tag.has(n)}if(!l){!0===c(k[r])?k[r]=null:e[k[r]]=!0;break a}}}}}for(h=0;h<a.length;h++)3===a[h]&&(h++,a[h]=a[h].filter(k=>{if("string"==typeof k){if(k in e)return e[k];let m=ja(k);return""==m?!0:m in e?e[m]:e[m]=aa(g.i,Array.isArray(m)?m:Q(m))||!0!==c(k)}return!1}));h=new Set;a=O(a,h);a=fa(a,c);return{css:a.replace(/@[a-z-]+[^{]+\{\s*\}/gm,""),sels:h}}};

//# sourceMappingURL=trapcss.js.map